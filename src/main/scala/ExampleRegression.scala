import scalax.chart.api._
import breeze.linalg._

object ExampleRegression extends App {

  val x = DenseVector(1.0, 2.4, 2.5, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.1, 4.6, 4.7, 4.8, 5.3, 5.4, 5.8, 5.9, 6.0, 6.1, 7.0, 7.1, 7.2, 7.3, 7.9, 8.3, 19.0, 20.0)
  val y = DenseVector(1.0, 0.8650853889943074, 0.8253169651841417, 0.828916531458446, 0.7641408751334045, 0.7811688311688312, 0.8132763975155279, 0.7882749894559258, 0.7814696485623003, 0.7440363498674745, 0.7047361299052775, 0.7020771513353116, 0.4127194435243458, 0.7023848415550473, 0.6080500195388824, 0.7120398773006135, 0.6062407132243685, 0.5587112171837709, 0.6064116379310345, 0.6113342257920571, 0.5585951940850278, 0.6108081308874567, 0.5648216482164822, 0.5658691265494379, 0.5274445656125045, 0.24324324324324326, 0.1951219512195122, 0.16129032258064516, 0.21052631578947367, 0.29411764705882354, 0.12, 0.1, 0.05).map(1 - _)
  //x ( ) 1, 2.4, 2.5, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.1, 4.6, 4.7, 4.8, 5.3, 5.4, 5.8, 5.9, 6, 6.1, 7, 7.1, 7.2, 7.3, 7.9, 8.3, 19, 20
  //y ( ) 0, 0.1349146, 0.174683, 0.1710835, 0.2358591, 0.2188312, 0.1867236, 0.211725, 0.2185304, 0.2559637, 0.2952639, 0.2979228, 0.5872806, 0.2976152, 0.39195, 0.2879601, 0.3937593, 0.4412888, 0.3935884, 0.3886658, 0.4414048, 0.3891919, 0.4351784, 0.4341309, 0.4725554, 0.7567568, 0.804878, 0.8387097, 0.7894737, 0.7058824, 0.88, 0.9, 0.95
  val edges = new DenseMatrix(8, 33, Array(1, -0.9021818, -0.6721763, -0.4981787, -0.3436219, -0.08519845, -0.964697, -0.05637244, 1, -0.5101818, -0.6721763, -0.4981787, -0.3436219, -0.08519845, -0.05469697, -0.05637244, 1, -0.4521818, -0.6721763, -0.4981787, -0.3436219, -0.08519845, -0.02719697, -0.05637244, 1, -0.2541818, -0.6721763, -0.4981787, -0.3436219, -0.08519845, 0.02530303, -0.05637244, 1, -0.1801818, -0.6721763, -0.4981787, -0.3436219, -0.08519845, 0.03280303, -0.05637244, 1, -0.1021818, -0.6721763, -0.4981787, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, -0.03018182, -0.6539945, -0.4981787, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.02581818, -0.599449, -0.4981787, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.06581818, -0.5085399, -0.4981787, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.08981818, -0.3812672, -0.4981787, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, -0.2176309, -0.4981787, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, -0.05096419, -0.4909323, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.08539945, -0.4691932, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.1914601, -0.4329613, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.2672176, -0.3822367, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, -0.2373092, -0.3436219, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.1335348, -0.2961836, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.1923584, -0.2753107, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.2460668, -0.2506428, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.4378827, -0.07037712, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.4609006, -0.02293879, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.5018213, 0.2047652, -0.08519845, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.5018213, 0.2669772, -0.08469544, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.5018213, 0.3245809, -0.08318638, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.5018213, 0.3775763, -0.08067129, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.5018213, 0.6471615, -0.01276385, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.5018213, 0.6540739, -0.0001883936, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.5018213, 0.6563781, 0.0133931, 0.03530303, -0.05637244, 1, 0.09781818, 0.3278237, 0.5018213, 0.6563781, 0.02742258, 0.03530303, -0.05631141, 1, 0.09781818, 0.3278237, 0.5018213, 0.6563781, 0.1092888, 0.03530303, -0.05338172, 1, 0.09781818, 0.3278237, 0.5018213, 0.6563781, 0.1616655, 0.03530303, -0.04898719, 1, 0.09781818, 0.3278237, 0.5018213, 0.6563781, 0.9092998, 0.03530303, 0.7934811, 1, 0.09781818, 0.3278237, 0.5018213, 0.6563781, 0.9148015, 0.03530303, 0.9436276))
  val knots = DenseVector[Double](1, 3, 3.5, 4.1, 5.8, 7.2, 20)
  val monotoneSplines = new MonotoneSplineRegressionFromR(knots)
  val predictor = monotoneSplines.learn(x, y)
  println(edges)
  //val x = Array(1.1, 2.0, 2.9)
  //val y = Array(1.0, 0.8, 0.5)
  //val regression = new MonotoneSplineRegression(new ArbitrarilyDistributedKnots(knots.data))
  //val rm = regression.regressionMatrix(x)
  //println(pinv(rm))
  //println(pinv(rm) * rm)
  //val predictor = regression.learn(x, y)
  val chart = new ChartWrapper(s"I-Spline Regression", xlabel = "x", ylabel = "y", visible = true)
  chart.addPoints(x.data.zip(y.data).toList.toXYSeriesCollection(s"Observations"))
  chart.addLines((1.0 until 20.0 by 0.1).map(p => (p, predictor(p))).toXYSeriesCollection("Regression"))
}